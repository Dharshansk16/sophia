generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ----------------- ENUMS -----------------
enum Role {
  USER
  ADMIN
}

enum ChatType {
  SINGLE
  DEBATE
}

enum DebateRole {
  PROPONENT
  OPPONENT
  MODERATOR
}

/// ----------------- AUTH / USERS -----------------
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String? // nullable for OAuth/SSO
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  refreshTokens RefreshToken[]

  // relations
  conversations Conversation[]
  messages      Message[]
  uploads       Upload[]
  debates       Debate[]

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          String   @id @unique
  hashedToken String
  revoked     Boolean  @default(false)
  expiresAt   DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, hashedToken])
}

/// ----------------- CORE MODELS -----------------
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // relations
  personaTags PersonaTag[]
}

model Persona {
  id                String    @id @default(cuid())
  name              String
  slug              String    @unique
  shortBio          String?
  imageUrl          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  // external pointers
  neo4jRootNodeId   String?
  searchIndexPrefix String?

  // relations
  personaTags   PersonaTag[]
  uploads       Upload[]
  conversations Conversation[]
  debateParts   DebateParticipant[]
  messages      Message[]

  @@index([name])
}

model PersonaTag {
  id        String  @id @default(cuid())
  persona   Persona @relation(fields: [personaId], references: [id])
  personaId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@unique([personaId, tagId])
  @@index([tagId])
  @@index([personaId])
}

/// ----------------- TRAINING / UPLOADS -----------------
model Upload {
  id           String    @id @default(cuid())
  filename     String
  url          String? // blob/S3/URL
  uploadedBy   User      @relation(fields: [uploadedById], references: [id])
  uploadedById String
  persona      Persona?  @relation(fields: [personaId], references: [id])
  personaId    String?
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?

  // relations
  chunks     TrainingChunk[]
  neo4jNodes Neo4jNode[]

  @@index([uploadedById])
  @@index([personaId])
}

model TrainingChunk {
  id          String   @id @default(cuid())
  upload      Upload   @relation(fields: [uploadId], references: [id])
  uploadId    String
  chunkIndex  Int
  pageRange   String?
  textPreview String?
  azureDocId  String?
  createdAt   DateTime @default(now())

  @@index([uploadId])
  @@index([azureDocId])
}

model Neo4jNode {
  id        String   @id @default(cuid())
  upload    Upload   @relation(fields: [uploadId], references: [id])
  uploadId  String
  nodeId    String
  label     String?
  props     Json?
  createdAt DateTime @default(now())

  @@index([uploadId])
  @@index([nodeId])
}

/// ----------------- CHAT / MESSAGES / CITATIONS -----------------
model Conversation {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  persona   Persona?  @relation(fields: [personaId], references: [id])
  personaId String?
  type      ChatType  @default(SINGLE)
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  messages Message[]
  debate   Debate?
  debateId String?   @unique

  @@index([userId])
  @@index([personaId])
}

model Message {
  id              String       @id @default(cuid())
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String
  authorUser      User?        @relation(fields: [authorUserId], references: [id])
  authorUserId    String?
  authorPersona   Persona?     @relation(fields: [authorPersonaId], references: [id])
  authorPersonaId String?
  content         String
  contentJson     Json?
  createdAt       DateTime     @default(now())
  deletedAt       DateTime?

  citations Citation[]

  @@index([conversationId])
  @@index([authorPersonaId])
  @@index([createdAt])
}

model Citation {
  id         String   @id @default(cuid())
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  String
  sourceType String
  sourceId   String?
  title      String?
  snippet    String?
  pageRange  String?
  createdAt  DateTime @default(now())

  @@index([messageId])
  @@index([sourceType, sourceId])
}

/// ----------------- DEBATE -----------------
model Debate {
  id             String        @id @default(cuid())
  topic          String
  createdById    String?
  createdBy      User?         @relation(fields: [createdById], references: [id])
  createdAt      DateTime      @default(now())
  deletedAt      DateTime?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @unique

  participants DebateParticipant[]
}

model DebateParticipant {
  id         String     @id @default(cuid())
  debate     Debate     @relation(fields: [debateId], references: [id])
  debateId   String
  persona    Persona    @relation(fields: [personaId], references: [id])
  personaId  String
  role       DebateRole
  orderIndex Int?
  createdAt  DateTime   @default(now())

  @@unique([debateId, personaId])
  @@index([personaId])
}
